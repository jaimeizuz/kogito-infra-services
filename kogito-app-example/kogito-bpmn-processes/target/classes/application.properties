quarkus.application.name=kogito-bpmn-processes
#quarkus.package.jar.type=mutable-jar 
#quarkus.live-reload.password=changeit 
#quarkus.live-reload.url=http://192.168.8.200:8080
############
# Services #
############

# These properties are residual from Distributed Architecture, where Data-Index, Data-Audit,
# and Jobs Service are external to the Kogito Runtime application.
#
# They are still necessary, but won't be anymore in future releases.

kogito.service.url=http://localhost:8080
kogito.jobs-service.url=http://localhost:8080
kogito.data-index.url=http://localhost:8080

###############
# Development #
###############

# Swagger Dev UI configuration.
# More at https://quarkus.io/guides/openapi-swaggerui

quarkus.http.cors=true
quarkus.http.cors.origins=*
quarkus.dev-ui.cors.enabled=false
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.http.test-port=0
quarkus.swagger-ui.always-include=true
quarkus.kogito.data-index.graphql.ui.always-include=true

# Development tasks users
%dev.jbpm.devui.users.jdoe.groups=admin,HR,IT

############
# Security #
############
kogito.security.auth.enabled=false
kogito.security.auth.impersonation.allowed-for-roles=managers
quarkus.oidc.enabled=false
quarkus.oidc.auth-server-url=http://localhost:8180/realms/kie
quarkus.oidc.discovery-enabled=true
quarkus.oidc.tenant-enabled=true
quarkus.oidc.client-id=kie-app
quarkus.oidc.credentials.secret=secret
quarkus.oidc.application-type=service
#quarkus.http.auth.permission.authenticated.paths=/*
#quarkus.http.auth.permission.authenticated.policy=authenticated
#quarkus.http.auth.permission.public.paths=/q/*,/docs/*
#quarkus.http.auth.permission.public.policy=permit

####################
# Containerization #
####################

# Profile to pack this example into a container image.
# To use it run a Maven build with the `container` profile (-Pcontainer)

%container.quarkus.container-image.build=true
%container.quarkus.container-image.push=false
%container.quarkus.container-image.group=kogito
%container.quarkus.container-image.registry=dev.local
%container.quarkus.container-image.tag=0.0.1-SNAPSHOT
%container.quarkus.container-image.name=kogito-bpmn-processes

###############
# Persistence #
###############

# Apache KIE provides a separate Flyway subsystem that allows Kogito's internal tables to be created and migrated
# without interfering with your application's Flyway, if you're using it.
#
# This property enables running this isolated Flyway mechanism automatically when the application starts.
# If you want more control over when/how/who executes changes to your database, disable it and run the SQL scripts manually.
kie.flyway.enabled=true

# Tells the Kogito runtime what kind of persistence is configured.
kogito.persistence.type=jdbc
kogito.persistence.proto.marshaller=false

# Default DS
#quarkus.datasource.db-kind=postgresql
#quarkus.datasource.username=kogito-user
#quarkus.datasource.password=kogito-pass
#quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL:jdbc:postgresql://0.0.0.0:5432/kogito}
#quarkus.datasource.reactive.url=${QUARKUS_DATASOURCE_REACTIVE_URL:postgresql://0.0.0.0:5432/kogito}

# Development DS
#%dev.quarkus.datasource.db-kind=h2
#%dev.quarkus.datasource.username=kogito
#%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:default;NON_KEYWORDS=VALUE,KEY

kogito.generate.rest.processes=true
kogito.transactionEnabled=true

quarkus.devservices.enabled=false
quarkus.datasource.devservices.enabled=false
quarkus.embedded.postgresql.port=5432
quarkus.embedded.postgresql.data.dir=embedded-postgres-data/kogito-database
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=postgres
quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL:jdbc:postgresql://localhost:5432/postgres?currentSchema=kogito}
quarkus.datasource.reactive.url=${QUARKUS_DATASOURCE_REACTIVE_URL:postgresql://localhost:5432/postgres?currentSchema=kogito}
quarkus.datasource.jdbc.transactions=xa
quarkus.datasource.jdbc.driver=org.postgresql.xa.PGXADataSource

quarkus.datasource."xos".db-kind=postgresql
quarkus.datasource."xos".username=postgres
quarkus.datasource."xos".password=postgres
quarkus.datasource."xos".jdbc.url=${QUARKUS_DATASOURCE__XOS__JDBC_URL:jdbc:postgresql://localhost:5432/postgres?currentSchema=xa-transactions}
quarkus.datasource."xos".reactive.url=${QUARKUS_DATASOURCE__XOS__REACTIVE_URL:postgresql://localhost:5432/postgres?currentSchema=xa-transactions}
quarkus.datasource."xos".jdbc.transactions=disabled
quarkus.transaction-manager.object-store.datasource=xos
quarkus.transaction-manager.enable-recovery=true
quarkus.transaction-manager.object-store.type=jdbc
quarkus.transaction-manager.object-store.create-table=true

quarkus.wiremock.devservices.enabled=true
quarkus.wiremock.devservices.files-mapping=src/main/resources/wiremock/dummy
quarkus.wiremock.devservices.port=8000
quarkus.wiremock.devservices.reload=true
quarkus.rest-client."dummy-rest-service".url=http://localhost:19002

#quarkus.kafka.devservices.enabled=true
#kafka.bootstrap.servers=localhost:9092
#quarkus.kafka.devservices.port=9092

#kogito.addon.messaging.incoming.defaultName=kogito_app_example_incoming_stream
#mp.messaging.incoming.kogito_incoming_stream.bootstrap.servers=localhost:9092
#mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka
#mp.messaging.incoming.kogito_incoming_stream.topic=sendConfirmationForm
#mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

#kogito.addon.messaging.outgoing.defaultName=kogito_app_example_outgoing_stream
#mp.messaging.outgoing.kogito_outgoing_stream.bootstrap.servers=localhost:9092
#mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka
#mp.messaging.outgoing.kogito_outgoing_stream.topic=receiveConfirmation
#mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer

#%dev.mp.messaging.outgoing.kogito-processinstances-events.bootstrap.servers=192.168.8.200:9092
#mp.messaging.outgoing.kogito-processinstances-events.connector=smallrye-kafka
#mp.messaging.outgoing.kogito-processinstances-events.topic=kogito-processinstances-events
#mp.messaging.outgoing.kogito-processinstances-events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

#%dev.mp.messaging.outgoing.kogito-usertaskinstances-events.bootstrap.servers=192.168.8.200:9092
#mp.messaging.outgoing.kogito-usertaskinstances-events.connector=smallrye-kafka
#mp.messaging.outgoing.kogito-usertaskinstances-events.topic=kogito-usertaskinstances-events
#mp.messaging.outgoing.kogito-usertaskinstances-events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

#%dev.mp.messaging.outgoing.kogito-processdefinitions-events.bootstrap.servers=192.168.8.200:9092
#mp.messaging.outgoing.kogito-processdefinitions-events.connector=smallrye-kafka
#mp.messaging.outgoing.kogito-processdefinitions-events.topic=kogito-processdefinitions-events
#mp.messaging.outgoing.kogito-processdefinitions-events.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer


# OpenTelemetry Traces
#quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317
#quarkus.otel.exporter.otlp.traces.headers=Authorization=Bearer my_secret

# OpenTelemetry Metrics
quarkus.datasource.jdbc.telemetry=true
quarkus.micrometer.enabled=true
quarkus.datasource.jdbc.enable-metrics=true
quarkus.datasource.metrics.enabled=true
quarkus.micrometer.binder.http-client.enabled=true
quarkus.micrometer.binder.http-server.enabled=true
quarkus.micrometer.binder.jvm=true
quarkus.micrometer.binder.kafka.enabled=false
quarkus.micrometer.binder.system=true
quarkus.micrometer.binder.vertx.enabled=true
quarkus.micrometer.binder.netty.enabled=true
quarkus.micrometer.registry-enabled-default=true
quarkus.micrometer.export.json.enabled=true
quarkus.micrometer.export.json.path=metrics/json
quarkus.micrometer.export.prometheus.enabled=true
quarkus.micrometer.export.prometheus.default-registry=true
quarkus.micrometer.export.prometheus.path=metrics/prometheus
quarkus.micrometer.export.otlp.enabled=false
#quarkus.micrometer.export.otlp.url=http://localhost:4318/v1/metrics
#quarkus.micrometer.export.otlp.get-enabled=true

quarkus.otel.instrument.messaging=true
quarkus.otel.instrument.resteasy-client=true
quarkus.otel.instrument.resteasy=true
quarkus.otel.instrument.rest=true
